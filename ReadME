I thought that the best structure of this project is with the implementation of different microservices, in particular i divided the logic in the follows microservice:
- the authentication/user service, 
- the laboratory, computer and booking management service
- data storage service.
The project is therefore divided into a frontend and three backend use REST API tecnology, Furthermore i did created a dll library in order to provide the classes in common between the services without creating references between the applications.
The fisrt page showed to the user is the login page, after the user enters the correct credentials the frontend makes two calls.With the first gets the user's nonce, after checked the existence of the username in the database. With the second, sends the password plus the nonce string to the user authentication controller, the service will verify that they are correct and then generate the token and send it back to the frontend, for the future calls.

The token is made up of the user's name, his email, his list of roles and the date of creation trasformed in milliseconds.
The token is saved in the session and remains there until it expires or you log out.
At each user interaction with the page that pass the token at backend, the interceptor will come into play which will intercept the backend calls and before starting them it will verify that the token is still valid, comparing the creation date with the current one, if is not pass 5 minutes and if it is still valid, updates the creation date with the verification date and continues with the calls.

As mentioned, in the token there is a list of user roles, the frontend looks at the roles and based on them shows tabs corresponding to the roles

The reservations made by the user are recorded in the data storage service in a json with the name of the person who booked, the name of the PC, the date and time, it is also saved on the computer, in a list where there are only the dates and times of all reservations.
In fact, before booking, the user must enter a date and time in which he wants to book so as to be able to take from the backend only the computers on the list that are not already occupied that day at that time.